#pragma once

#include <map>
#include <d3d12.h>

static std::map<D3D12_DESCRIPTOR_HEAP_TYPE, std::string> heapTypeToString = {
	{ D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV, "CBV_SRV_UAV"},
	{ D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER, "SAMPLER"},
	{ D3D12_DESCRIPTOR_HEAP_TYPE_RTV, "RTV"},
	{ D3D12_DESCRIPTOR_HEAP_TYPE_DSV, "DSV"},
	{ D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES, "NUM_TYPES"},
};

static std::map<std::string, D3D12_DESCRIPTOR_HEAP_TYPE> stringToHeapType = {
	{ "CBV_SRV_UAV", D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV },
	{ "SAMPLER", D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER },
	{ "RTV", D3D12_DESCRIPTOR_HEAP_TYPE_RTV },
	{ "DSV", D3D12_DESCRIPTOR_HEAP_TYPE_DSV },
	{ "NUM_TYPES", D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES },
};

static std::map<DXGI_FORMAT, std::string> dxgiFormatsToString = {
	{ DXGI_FORMAT_UNKNOWN, "UNKNOWN" },
	{ DXGI_FORMAT_R32G32B32A32_TYPELESS, "R32G32B32A32_TYPELESS" },
	{ DXGI_FORMAT_R32G32B32A32_FLOAT, "R32G32B32A32_FLOAT" },
	{ DXGI_FORMAT_R32G32B32A32_UINT, "R32G32B32A32_UINT" },
	{ DXGI_FORMAT_R32G32B32A32_SINT, "R32G32B32A32_SINT" },
	{ DXGI_FORMAT_R32G32B32_TYPELESS, "R32G32B32_TYPELESS" },
	{ DXGI_FORMAT_R32G32B32_FLOAT, "R32G32B32_FLOAT" },
	{ DXGI_FORMAT_R32G32B32_UINT, "R32G32B32_UINT" },
	{ DXGI_FORMAT_R32G32B32_SINT, "R32G32B32_SINT" },
	{ DXGI_FORMAT_R16G16B16A16_TYPELESS, "R16G16B16A16_TYPELESS" },
	{ DXGI_FORMAT_R16G16B16A16_FLOAT, "R16G16B16A16_FLOAT" },
	{ DXGI_FORMAT_R16G16B16A16_UNORM, "R16G16B16A16_UNORM" },
	{ DXGI_FORMAT_R16G16B16A16_UINT, "R16G16B16A16_UINT" },
	{ DXGI_FORMAT_R16G16B16A16_SNORM, "R16G16B16A16_SNORM" },
	{ DXGI_FORMAT_R16G16B16A16_SINT, "R16G16B16A16_SINT" },
	{ DXGI_FORMAT_R32G32_TYPELESS, "R32G32_TYPELESS" },
	{ DXGI_FORMAT_R32G32_FLOAT, "R32G32_FLOAT" },
	{ DXGI_FORMAT_R32G32_UINT, "R32G32_UINT" },
	{ DXGI_FORMAT_R32G32_SINT, "R32G32_SINT" },
	{ DXGI_FORMAT_R32G8X24_TYPELESS, "R32G8X24_TYPELESS" },
	{ DXGI_FORMAT_D32_FLOAT_S8X24_UINT, "D32_FLOAT_S8X24_UINT" },
	{ DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, "R32_FLOAT_X8X24_TYPELESS" },
	{ DXGI_FORMAT_X32_TYPELESS_G8X24_UINT, "X32_TYPELESS_G8X24_UINT" },
	{ DXGI_FORMAT_R10G10B10A2_TYPELESS, "R10G10B10A2_TYPELESS" },
	{ DXGI_FORMAT_R10G10B10A2_UNORM, "R10G10B10A2_UNORM" },
	{ DXGI_FORMAT_R10G10B10A2_UINT, "R10G10B10A2_UINT" },
	{ DXGI_FORMAT_R11G11B10_FLOAT, "R11G11B10_FLOAT" },
	{ DXGI_FORMAT_R8G8B8A8_TYPELESS, "R8G8B8A8_TYPELESS" },
	{ DXGI_FORMAT_R8G8B8A8_UNORM, "R8G8B8A8_UNORM" },
	{ DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, "R8G8B8A8_UNORM_SRGB" },
	{ DXGI_FORMAT_R8G8B8A8_UINT, "R8G8B8A8_UINT" },
	{ DXGI_FORMAT_R8G8B8A8_SNORM, "R8G8B8A8_SNORM" },
	{ DXGI_FORMAT_R8G8B8A8_SINT, "R8G8B8A8_SINT" },
	{ DXGI_FORMAT_R16G16_TYPELESS, "R16G16_TYPELESS" },
	{ DXGI_FORMAT_R16G16_FLOAT, "R16G16_FLOAT" },
	{ DXGI_FORMAT_R16G16_UNORM, "R16G16_UNORM" },
	{ DXGI_FORMAT_R16G16_UINT, "R16G16_UINT" },
	{ DXGI_FORMAT_R16G16_SNORM, "R16G16_SNORM" },
	{ DXGI_FORMAT_R16G16_SINT, "R16G16_SINT" },
	{ DXGI_FORMAT_R32_TYPELESS, "R32_TYPELESS" },
	{ DXGI_FORMAT_D32_FLOAT, "D32_FLOAT" },
	{ DXGI_FORMAT_R32_FLOAT, "R32_FLOAT" },
	{ DXGI_FORMAT_R32_UINT, "R32_UINT" },
	{ DXGI_FORMAT_R32_SINT, "R32_SINT" },
	{ DXGI_FORMAT_R24G8_TYPELESS, "R24G8_TYPELESS" },
	{ DXGI_FORMAT_D24_UNORM_S8_UINT, "D24_UNORM_S8_UINT" },
	{ DXGI_FORMAT_R24_UNORM_X8_TYPELESS, "R24_UNORM_X8_TYPELESS" },
	{ DXGI_FORMAT_X24_TYPELESS_G8_UINT, "X24_TYPELESS_G8_UINT" },
	{ DXGI_FORMAT_R8G8_TYPELESS, "R8G8_TYPELESS" },
	{ DXGI_FORMAT_R8G8_UNORM, "R8G8_UNORM" },
	{ DXGI_FORMAT_R8G8_UINT, "R8G8_UINT" },
	{ DXGI_FORMAT_R8G8_SNORM, "R8G8_SNORM" },
	{ DXGI_FORMAT_R8G8_SINT, "R8G8_SINT" },
	{ DXGI_FORMAT_R16_TYPELESS, "R16_TYPELESS" },
	{ DXGI_FORMAT_R16_FLOAT, "R16_FLOAT" },
	{ DXGI_FORMAT_D16_UNORM, "D16_UNORM" },
	{ DXGI_FORMAT_R16_UNORM, "R16_UNORM" },
	{ DXGI_FORMAT_R16_UINT, "R16_UINT" },
	{ DXGI_FORMAT_R16_SNORM, "R16_SNORM" },
	{ DXGI_FORMAT_R16_SINT, "R16_SINT" },
	{ DXGI_FORMAT_R8_TYPELESS, "R8_TYPELESS" },
	{ DXGI_FORMAT_R8_UNORM, "R8_UNORM" },
	{ DXGI_FORMAT_R8_UINT, "R8_UINT" },
	{ DXGI_FORMAT_R8_SNORM, "R8_SNORM" },
	{ DXGI_FORMAT_R8_SINT, "R8_SINT" },
	{ DXGI_FORMAT_A8_UNORM, "A8_UNORM" },
	{ DXGI_FORMAT_R1_UNORM, "R1_UNORM" },
	{ DXGI_FORMAT_R9G9B9E5_SHAREDEXP, "R9G9B9E5_SHAREDEXP" },
	{ DXGI_FORMAT_R8G8_B8G8_UNORM, "R8G8_B8G8_UNORM" },
	{ DXGI_FORMAT_G8R8_G8B8_UNORM, "G8R8_G8B8_UNORM" },
	{ DXGI_FORMAT_BC1_TYPELESS, "BC1_TYPELESS" },
	{ DXGI_FORMAT_BC1_UNORM, "BC1_UNORM" },
	{ DXGI_FORMAT_BC1_UNORM_SRGB, "BC1_UNORM_SRGB" },
	{ DXGI_FORMAT_BC2_TYPELESS, "BC2_TYPELESS" },
	{ DXGI_FORMAT_BC2_UNORM, "BC2_UNORM" },
	{ DXGI_FORMAT_BC2_UNORM_SRGB, "BC2_UNORM_SRGB" },
	{ DXGI_FORMAT_BC3_TYPELESS, "BC3_TYPELESS" },
	{ DXGI_FORMAT_BC3_UNORM, "BC3_UNORM" },
	{ DXGI_FORMAT_BC3_UNORM_SRGB, "BC3_UNORM_SRGB" },
	{ DXGI_FORMAT_BC4_TYPELESS, "BC4_TYPELESS" },
	{ DXGI_FORMAT_BC4_UNORM, "BC4_UNORM" },
	{ DXGI_FORMAT_BC4_SNORM, "BC4_SNORM" },
	{ DXGI_FORMAT_BC5_TYPELESS, "BC5_TYPELESS" },
	{ DXGI_FORMAT_BC5_UNORM, "BC5_UNORM" },
	{ DXGI_FORMAT_BC5_SNORM, "BC5_SNORM" },
	{ DXGI_FORMAT_B5G6R5_UNORM, "B5G6R5_UNORM" },
	{ DXGI_FORMAT_B5G5R5A1_UNORM, "B5G5R5A1_UNORM" },
	{ DXGI_FORMAT_B8G8R8A8_UNORM, "B8G8R8A8_UNORM" },
	{ DXGI_FORMAT_B8G8R8X8_UNORM, "B8G8R8X8_UNORM" },
	{ DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, "R10G10B10_XR_BIAS_A2_UNORM" },
	{ DXGI_FORMAT_B8G8R8A8_TYPELESS, "B8G8R8A8_TYPELESS" },
	{ DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, "B8G8R8A8_UNORM_SRGB" },
	{ DXGI_FORMAT_B8G8R8X8_TYPELESS, "B8G8R8X8_TYPELESS" },
	{ DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, "B8G8R8X8_UNORM_SRGB" },
	{ DXGI_FORMAT_BC6H_TYPELESS, "BC6H_TYPELESS" },
	{ DXGI_FORMAT_BC6H_UF16, "BC6H_UF16" },
	{ DXGI_FORMAT_BC6H_SF16, "BC6H_SF16" },
	{ DXGI_FORMAT_BC7_TYPELESS, "BC7_TYPELESS" },
	{ DXGI_FORMAT_BC7_UNORM, "BC7_UNORM" },
	{ DXGI_FORMAT_BC7_UNORM_SRGB, "BC7_UNORM_SRGB" },
	{ DXGI_FORMAT_AYUV, "AYUV" },
	{ DXGI_FORMAT_Y410, "Y410" },
	{ DXGI_FORMAT_Y416, "Y416" },
	{ DXGI_FORMAT_NV12, "NV12" },
	{ DXGI_FORMAT_P010, "P010" },
	{ DXGI_FORMAT_P016, "P016" },
	{ DXGI_FORMAT_420_OPAQUE, "420_OPAQUE" },
	{ DXGI_FORMAT_YUY2, "YUY2" },
	{ DXGI_FORMAT_Y210, "Y210" },
	{ DXGI_FORMAT_Y216, "Y216" },
	{ DXGI_FORMAT_NV11, "NV11" },
	{ DXGI_FORMAT_AI44, "AI44" },
	{ DXGI_FORMAT_IA44, "IA44" },
	{ DXGI_FORMAT_P8, "P8" },
	{ DXGI_FORMAT_A8P8, "A8P8" },
	{ DXGI_FORMAT_B4G4R4A4_UNORM, "B4G4R4A4_UNORM" },
	{ DXGI_FORMAT_P208, "P208" },
	{ DXGI_FORMAT_V208, "V208" },
	{ DXGI_FORMAT_V408, "V408" },
	{ DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,  "SAMPLER_FEEDBACK_MIN_MIP_OPAQUE" },
	{ DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE, "SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE" },
	{ DXGI_FORMAT_A4B4G4R4_UNORM, "A4B4G4R4_UNORM" },
	{ DXGI_FORMAT_FORCE_UINT, "FORCE_UINT" }
};

static std::map<std::string, DXGI_FORMAT> stringToDxgiFormat = {
	{ "UNKNOWN", DXGI_FORMAT_UNKNOWN },
	{ "R32G32B32A32_TYPELESS", DXGI_FORMAT_R32G32B32A32_TYPELESS },
	{ "R32G32B32A32_FLOAT", DXGI_FORMAT_R32G32B32A32_FLOAT },
	{ "R32G32B32A32_UINT", DXGI_FORMAT_R32G32B32A32_UINT },
	{ "R32G32B32A32_SINT", DXGI_FORMAT_R32G32B32A32_SINT },
	{ "R32G32B32_TYPELESS", DXGI_FORMAT_R32G32B32_TYPELESS },
	{ "R32G32B32_FLOAT", DXGI_FORMAT_R32G32B32_FLOAT },
	{ "R32G32B32_UINT", DXGI_FORMAT_R32G32B32_UINT },
	{ "R32G32B32_SINT", DXGI_FORMAT_R32G32B32_SINT },
	{ "R16G16B16A16_TYPELESS", DXGI_FORMAT_R16G16B16A16_TYPELESS },
	{ "R16G16B16A16_FLOAT", DXGI_FORMAT_R16G16B16A16_FLOAT },
	{ "R16G16B16A16_UNORM", DXGI_FORMAT_R16G16B16A16_UNORM },
	{ "R16G16B16A16_UINT", DXGI_FORMAT_R16G16B16A16_UINT },
	{ "R16G16B16A16_SNORM", DXGI_FORMAT_R16G16B16A16_SNORM },
	{ "R16G16B16A16_SINT", DXGI_FORMAT_R16G16B16A16_SINT },
	{ "R32G32_TYPELESS", DXGI_FORMAT_R32G32_TYPELESS },
	{ "R32G32_FLOAT", DXGI_FORMAT_R32G32_FLOAT },
	{ "R32G32_UINT", DXGI_FORMAT_R32G32_UINT },
	{ "R32G32_SINT", DXGI_FORMAT_R32G32_SINT },
	{ "R32G8X24_TYPELESS", DXGI_FORMAT_R32G8X24_TYPELESS },
	{ "D32_FLOAT_S8X24_UINT", DXGI_FORMAT_D32_FLOAT_S8X24_UINT },
	{ "R32_FLOAT_X8X24_TYPELESS", DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS },
	{ "X32_TYPELESS_G8X24_UINT", DXGI_FORMAT_X32_TYPELESS_G8X24_UINT },
	{ "R10G10B10A2_TYPELESS", DXGI_FORMAT_R10G10B10A2_TYPELESS },
	{ "R10G10B10A2_UNORM", DXGI_FORMAT_R10G10B10A2_UNORM },
	{ "R10G10B10A2_UINT", DXGI_FORMAT_R10G10B10A2_UINT },
	{ "R11G11B10_FLOAT", DXGI_FORMAT_R11G11B10_FLOAT },
	{ "R8G8B8A8_TYPELESS", DXGI_FORMAT_R8G8B8A8_TYPELESS },
	{ "R8G8B8A8_UNORM", DXGI_FORMAT_R8G8B8A8_UNORM },
	{ "R8G8B8A8_UNORM_SRGB", DXGI_FORMAT_R8G8B8A8_UNORM_SRGB },
	{ "R8G8B8A8_UINT", DXGI_FORMAT_R8G8B8A8_UINT },
	{ "R8G8B8A8_SNORM", DXGI_FORMAT_R8G8B8A8_SNORM },
	{ "R8G8B8A8_SINT", DXGI_FORMAT_R8G8B8A8_SINT },
	{ "R16G16_TYPELESS", DXGI_FORMAT_R16G16_TYPELESS },
	{ "R16G16_FLOAT", DXGI_FORMAT_R16G16_FLOAT },
	{ "R16G16_UNORM", DXGI_FORMAT_R16G16_UNORM },
	{ "R16G16_UINT", DXGI_FORMAT_R16G16_UINT },
	{ "R16G16_SNORM", DXGI_FORMAT_R16G16_SNORM },
	{ "R16G16_SINT", DXGI_FORMAT_R16G16_SINT },
	{ "R32_TYPELESS", DXGI_FORMAT_R32_TYPELESS },
	{ "D32_FLOAT", DXGI_FORMAT_D32_FLOAT },
	{ "R32_FLOAT", DXGI_FORMAT_R32_FLOAT },
	{ "R32_UINT", DXGI_FORMAT_R32_UINT },
	{ "R32_SINT", DXGI_FORMAT_R32_SINT },
	{ "R24G8_TYPELESS", DXGI_FORMAT_R24G8_TYPELESS },
	{ "D24_UNORM_S8_UINT", DXGI_FORMAT_D24_UNORM_S8_UINT },
	{ "R24_UNORM_X8_TYPELESS", DXGI_FORMAT_R24_UNORM_X8_TYPELESS },
	{ "X24_TYPELESS_G8_UINT", DXGI_FORMAT_X24_TYPELESS_G8_UINT },
	{ "R8G8_TYPELESS", DXGI_FORMAT_R8G8_TYPELESS },
	{ "R8G8_UNORM", DXGI_FORMAT_R8G8_UNORM },
	{ "R8G8_UINT", DXGI_FORMAT_R8G8_UINT },
	{ "R8G8_SNORM", DXGI_FORMAT_R8G8_SNORM },
	{ "R8G8_SINT", DXGI_FORMAT_R8G8_SINT },
	{ "R16_TYPELESS", DXGI_FORMAT_R16_TYPELESS },
	{ "R16_FLOAT", DXGI_FORMAT_R16_FLOAT },
	{ "D16_UNORM", DXGI_FORMAT_D16_UNORM },
	{ "R16_UNORM", DXGI_FORMAT_R16_UNORM },
	{ "R16_UINT", DXGI_FORMAT_R16_UINT },
	{ "R16_SNORM", DXGI_FORMAT_R16_SNORM },
	{ "R16_SINT", DXGI_FORMAT_R16_SINT },
	{ "R8_TYPELESS", DXGI_FORMAT_R8_TYPELESS },
	{ "R8_UNORM", DXGI_FORMAT_R8_UNORM },
	{ "R8_UINT", DXGI_FORMAT_R8_UINT },
	{ "R8_SNORM", DXGI_FORMAT_R8_SNORM },
	{ "R8_SINT", DXGI_FORMAT_R8_SINT },
	{ "A8_UNORM", DXGI_FORMAT_A8_UNORM },
	{ "R1_UNORM", DXGI_FORMAT_R1_UNORM },
	{ "R9G9B9E5_SHAREDEXP", DXGI_FORMAT_R9G9B9E5_SHAREDEXP },
	{ "R8G8_B8G8_UNORM", DXGI_FORMAT_R8G8_B8G8_UNORM },
	{ "G8R8_G8B8_UNORM", DXGI_FORMAT_G8R8_G8B8_UNORM },
	{ "BC1_TYPELESS", DXGI_FORMAT_BC1_TYPELESS },
	{ "BC1_UNORM", DXGI_FORMAT_BC1_UNORM },
	{ "BC1_UNORM_SRGB", DXGI_FORMAT_BC1_UNORM_SRGB },
	{ "BC2_TYPELESS", DXGI_FORMAT_BC2_TYPELESS },
	{ "BC2_UNORM", DXGI_FORMAT_BC2_UNORM },
	{ "BC2_UNORM_SRGB", DXGI_FORMAT_BC2_UNORM_SRGB },
	{ "BC3_TYPELESS", DXGI_FORMAT_BC3_TYPELESS },
	{ "BC3_UNORM", DXGI_FORMAT_BC3_UNORM },
	{ "BC3_UNORM_SRGB", DXGI_FORMAT_BC3_UNORM_SRGB },
	{ "BC4_TYPELESS", DXGI_FORMAT_BC4_TYPELESS },
	{ "BC4_UNORM", DXGI_FORMAT_BC4_UNORM },
	{ "BC4_SNORM", DXGI_FORMAT_BC4_SNORM },
	{ "BC5_TYPELESS", DXGI_FORMAT_BC5_TYPELESS },
	{ "BC5_UNORM", DXGI_FORMAT_BC5_UNORM },
	{ "BC5_SNORM", DXGI_FORMAT_BC5_SNORM },
	{ "B5G6R5_UNORM", DXGI_FORMAT_B5G6R5_UNORM },
	{ "B5G5R5A1_UNORM", DXGI_FORMAT_B5G5R5A1_UNORM },
	{ "B8G8R8A8_UNORM", DXGI_FORMAT_B8G8R8A8_UNORM },
	{ "B8G8R8X8_UNORM", DXGI_FORMAT_B8G8R8X8_UNORM },
	{ "R10G10B10_XR_BIAS_A2_UNORM", DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM },
	{ "B8G8R8A8_TYPELESS", DXGI_FORMAT_B8G8R8A8_TYPELESS },
	{ "B8G8R8A8_UNORM_SRGB", DXGI_FORMAT_B8G8R8A8_UNORM_SRGB },
	{ "B8G8R8X8_TYPELESS", DXGI_FORMAT_B8G8R8X8_TYPELESS },
	{ "B8G8R8X8_UNORM_SRGB", DXGI_FORMAT_B8G8R8X8_UNORM_SRGB },
	{ "BC6H_TYPELESS", DXGI_FORMAT_BC6H_TYPELESS },
	{ "BC6H_UF16", DXGI_FORMAT_BC6H_UF16 },
	{ "BC6H_SF16", DXGI_FORMAT_BC6H_SF16 },
	{ "BC7_TYPELESS", DXGI_FORMAT_BC7_TYPELESS },
	{ "BC7_UNORM", DXGI_FORMAT_BC7_UNORM },
	{ "BC7_UNORM_SRGB", DXGI_FORMAT_BC7_UNORM_SRGB },
	{ "AYUV", DXGI_FORMAT_AYUV },
	{ "Y410", DXGI_FORMAT_Y410 },
	{ "Y416", DXGI_FORMAT_Y416 },
	{ "NV12", DXGI_FORMAT_NV12 },
	{ "P010", DXGI_FORMAT_P010 },
	{ "P016", DXGI_FORMAT_P016 },
	{ "420_OPAQUE", DXGI_FORMAT_420_OPAQUE },
	{ "YUY2", DXGI_FORMAT_YUY2 },
	{ "Y210", DXGI_FORMAT_Y210 },
	{ "Y216", DXGI_FORMAT_Y216 },
	{ "NV11", DXGI_FORMAT_NV11 },
	{ "AI44", DXGI_FORMAT_AI44 },
	{ "IA44", DXGI_FORMAT_IA44 },
	{ "P8", DXGI_FORMAT_P8 },
	{ "A8P8", DXGI_FORMAT_A8P8 },
	{ "B4G4R4A4_UNORM", DXGI_FORMAT_B4G4R4A4_UNORM },
	{ "P208", DXGI_FORMAT_P208 },
	{ "V208", DXGI_FORMAT_V208 },
	{ "V408", DXGI_FORMAT_V408 },
	{ "SAMPLER_FEEDBACK_MIN_MIP_OPAQUE", DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE },
	{ "SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE", DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE },
	{ "A4B4G4R4_UNORM", DXGI_FORMAT_A4B4G4R4_UNORM },
	{ "FORCE_UINT", DXGI_FORMAT_FORCE_UINT }
};

static std::map<D3D12_FILTER, std::string> filterToString = {
	{ D3D12_FILTER_MIN_MAG_MIP_POINT, "MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR, "MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT, "MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR, "MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT, "MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT, "MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MIN_MAG_MIP_LINEAR, "MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT, "MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_ANISOTROPIC, "ANISOTROPIC" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT, "COMPARISON_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR, "COMPARISON_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT, "COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR, "COMPARISON_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT, "COMPARISON_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT, "COMPARISON_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR, "COMPARISON_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT, "COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_ANISOTROPIC, "COMPARISON_ANISOTROPIC" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT, "MINIMUM_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR, "MINIMUM_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT, "MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR, "MINIMUM_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT, "MINIMUM_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT, "MINIMUM_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR, "MINIMUM_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT, "MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_ANISOTROPIC, "MINIMUM_ANISOTROPIC" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT, "MAXIMUM_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR, "MAXIMUM_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT, "MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR, "MAXIMUM_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT, "MAXIMUM_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT, "MAXIMUM_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR, "MAXIMUM_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT, "MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_ANISOTROPIC, "MAXIMUM_ANISOTROPIC" }
};

static std::map<std::string, D3D12_FILTER> stringToFilter = {
	{ "MIN_MAG_MIP_POINT", D3D12_FILTER_MIN_MAG_MIP_POINT },
	{ "MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR },
	{ "MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR },
	{ "MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT },
	{ "MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT },
	{ "MIN_MAG_MIP_LINEAR", D3D12_FILTER_MIN_MAG_MIP_LINEAR },
	{ "MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "ANISOTROPIC", D3D12_FILTER_ANISOTROPIC },
	{ "COMPARISON_MIN_MAG_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT },
	{ "COMPARISON_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR },
	{ "COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "COMPARISON_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR },
	{ "COMPARISON_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT },
	{ "COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "COMPARISON_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT },
	{ "COMPARISON_MIN_MAG_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR },
	{ "COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "COMPARISON_ANISOTROPIC", D3D12_FILTER_COMPARISON_ANISOTROPIC },
	{ "MINIMUM_MIN_MAG_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT },
	{ "MINIMUM_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR },
	{ "MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MINIMUM_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR },
	{ "MINIMUM_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT },
	{ "MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MINIMUM_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT },
	{ "MINIMUM_MIN_MAG_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR },
	{ "MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "MINIMUM_ANISOTROPIC", D3D12_FILTER_MINIMUM_ANISOTROPIC },
	{ "MAXIMUM_MIN_MAG_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT },
	{ "MAXIMUM_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR },
	{ "MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MAXIMUM_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR },
	{ "MAXIMUM_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT },
	{ "MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MAXIMUM_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT },
	{ "MAXIMUM_MIN_MAG_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR },
	{ "MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "MAXIMUM_ANISOTROPIC", D3D12_FILTER_MAXIMUM_ANISOTROPIC }
};

static std::map<D3D12_TEXTURE_ADDRESS_MODE, std::string> textureAddressModeToString = {
	{ D3D12_TEXTURE_ADDRESS_MODE_WRAP, "ADDRESS_MODE_WRAP" },
	{ D3D12_TEXTURE_ADDRESS_MODE_MIRROR, "ADDRESS_MODE_MIRROR" },
	{ D3D12_TEXTURE_ADDRESS_MODE_CLAMP, "ADDRESS_MODE_CLAMP" },
	{ D3D12_TEXTURE_ADDRESS_MODE_BORDER, "ADDRESS_MODE_BORDER" },
	{ D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE, "ADDRESS_MODE_MIRROR_ONCE" }
};

static std::map<std::string, D3D12_TEXTURE_ADDRESS_MODE> stringToTextureAddressMode = {
	{ "ADDRESS_MODE_WRAP", D3D12_TEXTURE_ADDRESS_MODE_WRAP },
	{ "ADDRESS_MODE_MIRROR", D3D12_TEXTURE_ADDRESS_MODE_MIRROR },
	{ "ADDRESS_MODE_CLAMP", D3D12_TEXTURE_ADDRESS_MODE_CLAMP },
	{ "ADDRESS_MODE_BORDER", D3D12_TEXTURE_ADDRESS_MODE_BORDER },
	{ "ADDRESS_MODE_MIRROR_ONCE", D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE }
};

static std::map<D3D12_COMPARISON_FUNC, std::string> comparisonFuncToString = {
	{ D3D12_COMPARISON_FUNC_NONE, "NONE" },
	{ D3D12_COMPARISON_FUNC_NEVER, "NEVER" },
	{ D3D12_COMPARISON_FUNC_LESS, "LESS" },
	{ D3D12_COMPARISON_FUNC_EQUAL, "EQUAL" },
	{ D3D12_COMPARISON_FUNC_LESS_EQUAL, "LESS_EQUAL" },
	{ D3D12_COMPARISON_FUNC_GREATER, "GREATER" },
	{ D3D12_COMPARISON_FUNC_NOT_EQUAL, "NOT_EQUAL" },
	{ D3D12_COMPARISON_FUNC_GREATER_EQUAL, "GREATER_EQUAL" },
	{ D3D12_COMPARISON_FUNC_ALWAYS, "ALWAYS" }
};

static std::map<std::string, D3D12_COMPARISON_FUNC> stringToComparisonFunc = {
	{ "NONE", D3D12_COMPARISON_FUNC_NONE },
	{ "NEVER", D3D12_COMPARISON_FUNC_NEVER },
	{ "LESS", D3D12_COMPARISON_FUNC_LESS },
	{ "EQUAL", D3D12_COMPARISON_FUNC_EQUAL },
	{ "LESS_EQUAL", D3D12_COMPARISON_FUNC_LESS_EQUAL },
	{ "GREATER", D3D12_COMPARISON_FUNC_GREATER },
	{ "NOT_EQUAL", D3D12_COMPARISON_FUNC_NOT_EQUAL },
	{ "GREATER_EQUAL", D3D12_COMPARISON_FUNC_GREATER_EQUAL },
	{ "ALWAYS", D3D12_COMPARISON_FUNC_ALWAYS }
};

static std::map<D3D12_STATIC_BORDER_COLOR, std::string> borderColorToString = {
	{ D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK, "TRANSPARENT_BLACK" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK, "OPAQUE_BLACK" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, "OPAQUE_WHITE" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT, "OPAQUE_BLACK_UINT" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT, "OPAQUE_WHITE_UINT" }
};

static std::map<std::string, D3D12_STATIC_BORDER_COLOR> stringToBorderColor = {
	{ "TRANSPARENT_BLACK", D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK },
	{ "OPAQUE_BLACK", D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK },
	{ "OPAQUE_WHITE", D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE },
	{ "OPAQUE_BLACK_UINT", D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT },
	{ "OPAQUE_WHITE_UINT", D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT }
};

static std::map<D3D12_SHADER_VISIBILITY, std::string> shaderVisibilityToString = {
	{ D3D12_SHADER_VISIBILITY_ALL, "ALL" },
	{ D3D12_SHADER_VISIBILITY_VERTEX, "VERTEX" },
	{ D3D12_SHADER_VISIBILITY_HULL, "HULL" },
	{ D3D12_SHADER_VISIBILITY_DOMAIN, "DOMAIN" },
	{ D3D12_SHADER_VISIBILITY_GEOMETRY, "GEOMETRY" },
	{ D3D12_SHADER_VISIBILITY_PIXEL, "PIXEL" },
	{ D3D12_SHADER_VISIBILITY_AMPLIFICATION, "AMPLIFICATION" },
	{ D3D12_SHADER_VISIBILITY_MESH, "MESH" }
};

static std::map<std::string, D3D12_SHADER_VISIBILITY> stringToShaderVisibility = {
	{ "ALL", D3D12_SHADER_VISIBILITY_ALL},
	{ "VERTEX", D3D12_SHADER_VISIBILITY_VERTEX },
	{ "HULL", D3D12_SHADER_VISIBILITY_HULL },
	{ "DOMAIN", D3D12_SHADER_VISIBILITY_DOMAIN },
	{ "GEOMETRY", D3D12_SHADER_VISIBILITY_GEOMETRY },
	{ "PIXEL", D3D12_SHADER_VISIBILITY_PIXEL },
	{ "AMPLIFICATION", D3D12_SHADER_VISIBILITY_AMPLIFICATION },
	{ "MESH", D3D12_SHADER_VISIBILITY_MESH }
};

static std::map<SOUND_EFFECT_INSTANCE_FLAGS, std::string> soundEffectInstanceFlagToString = {
	{ SoundEffectInstance_Default, "Default" },
	{ SoundEffectInstance_Use3D, "Use3D" },
	{ SoundEffectInstance_ReverbUseFilters,	"ReverbUseFilters" },
	{ SoundEffectInstance_NoSetPitch,	"NoSetPitch" },
	{ SoundEffectInstance_UseRedirectLFE,	"UseRedirectLFE" }
};

static std::map<std::string, SOUND_EFFECT_INSTANCE_FLAGS> stringToSoundEffectInstanceFlag = {
	{ "Default", SoundEffectInstance_Default },
	{ "Use3D",	SoundEffectInstance_Use3D },
	{ "ReverbUseFilters", SoundEffectInstance_ReverbUseFilters },
	{ "NoSetPitch", SoundEffectInstance_NoSetPitch },
	{ "UseRedirectLFE", SoundEffectInstance_UseRedirectLFE },
};

static std::map<D3D_PRIMITIVE_TOPOLOGY, std::string> primitiveTopologyToString = {
	{ D3D_PRIMITIVE_TOPOLOGY_UNDEFINED , "UNDEFINED" },
	{ D3D_PRIMITIVE_TOPOLOGY_POINTLIST , "POINTLIST" },
	{ D3D_PRIMITIVE_TOPOLOGY_LINELIST , "LINELIST" },
	{ D3D_PRIMITIVE_TOPOLOGY_LINESTRIP , "LINESTRIP" },
	{ D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST , "TRIANGLELIST" },
	{ D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP , "TRIANGLESTRIP" },
	{ D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN , "TRIANGLEFAN" },
	{ D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ , "LINELIST_ADJ" },
	{ D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ , "LINESTRIP_ADJ" },
	{ D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ , "TRIANGLELIST_ADJ" },
	{ D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ , "TRIANGLESTRIP_ADJ" },
};

static std::map<std::string, D3D_PRIMITIVE_TOPOLOGY> stringToPrimitiveTopology = {
	{ "UNDEFINED", D3D_PRIMITIVE_TOPOLOGY_UNDEFINED },
	{ "POINTLIST", D3D_PRIMITIVE_TOPOLOGY_POINTLIST },
	{ "LINELIST", D3D_PRIMITIVE_TOPOLOGY_LINELIST },
	{ "LINESTRIP", D3D_PRIMITIVE_TOPOLOGY_LINESTRIP },
	{ "TRIANGLELIST", D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST },
	{ "TRIANGLESTRIP", D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP },
	{ "TRIANGLEFAN", D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN },
	{ "LINELIST_ADJ", D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ },
	{ "LINESTRIP_ADJ", D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ },
	{ "TRIANGLELIST_ADJ", D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ },
	{ "TRIANGLESTRIP_ADJ", D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ },
};

static std::map<D3D12_PRIMITIVE_TOPOLOGY_TYPE, std::string> primitiveTopologyTypeToString = {
	{ D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED, "UNDEFINED" },
	{ D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT, "POINT" },
	{ D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE, "LINE" },
	{ D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE, "TRIANGLE" },
	{ D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH, "PATCH" },
};

static std::map<std::string, D3D12_PRIMITIVE_TOPOLOGY_TYPE> stringToPrimitiveTopologyType = {
	{ "UNDEFINED", D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED },
	{ "POINT", D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT },
	{ "LINE", D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE },
	{ "TRIANGLE", D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE },
	{ "PATCH", D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH },
};

static std::map<D3D12_FILL_MODE, std::string> fillModeToString = {
	{ D3D12_FILL_MODE_WIREFRAME, "WIREFRAME" },
	{ D3D12_FILL_MODE_SOLID, "SOLID" },
};

static std::map<std::string, D3D12_FILL_MODE> stringToFillMode = {
	{ "WIREFRAME", D3D12_FILL_MODE_WIREFRAME },
	{ "SOLID", D3D12_FILL_MODE_SOLID },
};

static std::map<D3D12_CULL_MODE, std::string> cullModeToString = {
	{ D3D12_CULL_MODE_NONE, "NONE" },
	{ D3D12_CULL_MODE_FRONT, "FRONT" },
	{ D3D12_CULL_MODE_BACK, "BACK" }
};

static std::map<std::string, D3D12_CULL_MODE> stringToCullMode = {
	{ "NONE",	D3D12_CULL_MODE_NONE },
	{ "FRONT",	D3D12_CULL_MODE_FRONT },
	{ "BACK", D3D12_CULL_MODE_BACK },
};

static std::map<D3D12_CONSERVATIVE_RASTERIZATION_MODE, std::string> conservativeRasterizationModeToString = {
	{ D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF , "OFF" },
	{ D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON, "ON" },
};

static std::map<std::string, D3D12_CONSERVATIVE_RASTERIZATION_MODE> stringToConservativeRasterizationMode = {
	{ "OFF", D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF },
	{ "ON", D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON },
};

static std::map<D3D12_BLEND, std::string> blendToString =
{
	{ D3D12_BLEND_ZERO, "ZERO" },
	{ D3D12_BLEND_ONE, "ONE" },
	{ D3D12_BLEND_SRC_COLOR, "SRC_COLOR" },
	{ D3D12_BLEND_INV_SRC_COLOR, "INV_SRC_COLOR" },
	{ D3D12_BLEND_SRC_ALPHA, "SRC_ALPHA" },
	{ D3D12_BLEND_INV_SRC_ALPHA, "INV_SRC_ALPHA" },
	{ D3D12_BLEND_DEST_ALPHA, "DEST_ALPHA" },
	{ D3D12_BLEND_INV_DEST_ALPHA, "INV_DEST_ALPHA" },
	{ D3D12_BLEND_DEST_COLOR, "DEST_COLOR" },
	{ D3D12_BLEND_INV_DEST_COLOR , "INV_DEST_COLOR" },
	{ D3D12_BLEND_SRC_ALPHA_SAT , "SRC_ALPHA_SAT" },
	{ D3D12_BLEND_BLEND_FACTOR , "BLEND_FACTOR" },
	{ D3D12_BLEND_INV_BLEND_FACTOR , "INV_BLEND_FACTOR" },
	{ D3D12_BLEND_SRC1_COLOR , "SRC1_COLOR" },
	{ D3D12_BLEND_INV_SRC1_COLOR , "INV_SRC1_COLOR" },
	{ D3D12_BLEND_SRC1_ALPHA , "SRC1_ALPHA" },
	{ D3D12_BLEND_INV_SRC1_ALPHA , "INV_SRC1_ALPHA" },
	{ D3D12_BLEND_ALPHA_FACTOR , "ALPHA_FACTOR" },
	{ D3D12_BLEND_INV_ALPHA_FACTOR, "INV_ALPHA_FACTOR" },
};

static std::map<std::string, D3D12_BLEND> stringToBlend = {
	{ "ZERO", D3D12_BLEND_ZERO},
	{ "ONE", D3D12_BLEND_ONE},
	{ "SRC_COLOR",  D3D12_BLEND_SRC_COLOR},
	{ "INV_SRC_COLOR", D3D12_BLEND_INV_SRC_COLOR},
	{ "SRC_ALPHA", D3D12_BLEND_SRC_ALPHA},
	{ "INV_SRC_ALPHA", D3D12_BLEND_INV_SRC_ALPHA},
	{ "DEST_ALPHA", D3D12_BLEND_DEST_ALPHA},
	{ "INV_DEST_ALPHA", D3D12_BLEND_INV_DEST_ALPHA},
	{ "DEST_COLOR", D3D12_BLEND_DEST_COLOR},
	{ "INV_DEST_COLOR", D3D12_BLEND_INV_DEST_COLOR },
	{ "SRC_ALPHA_SAT", D3D12_BLEND_SRC_ALPHA_SAT },
	{ "BLEND_FACTOR", D3D12_BLEND_BLEND_FACTOR },
	{ "INV_BLEND_FACTOR", D3D12_BLEND_INV_BLEND_FACTOR },
	{ "SRC1_COLOR", D3D12_BLEND_SRC1_COLOR },
	{ "INV_SRC1_COLOR", D3D12_BLEND_INV_SRC1_COLOR },
	{ "SRC1_ALPHA", D3D12_BLEND_SRC1_ALPHA },
	{ "INV_SRC1_ALPHA", D3D12_BLEND_INV_SRC1_ALPHA },
	{ "ALPHA_FACTOR", D3D12_BLEND_ALPHA_FACTOR },
	{ "INV_ALPHA_FACTOR", D3D12_BLEND_INV_ALPHA_FACTOR },
};

static std::map<D3D12_BLEND_OP, std::string> blendOpToString = {
	{ D3D12_BLEND_OP_ADD, "ADD" },
	{ D3D12_BLEND_OP_SUBTRACT, "SUBTRACT" },
	{ D3D12_BLEND_OP_REV_SUBTRACT, "REV_SUBTRACT" },
	{ D3D12_BLEND_OP_MIN, "MIN" },
	{ D3D12_BLEND_OP_MAX, "MAX" },
};

static std::map<std::string, D3D12_BLEND_OP> stringToBlendOp = {
	{ "ADD", D3D12_BLEND_OP_ADD },
	{ "SUBTRACT", D3D12_BLEND_OP_SUBTRACT },
	{ "REV_SUBTRACT", D3D12_BLEND_OP_REV_SUBTRACT },
	{ "MIN", D3D12_BLEND_OP_MIN },
	{ "MAX", D3D12_BLEND_OP_MAX },
};

static std::map<D3D12_LOGIC_OP, std::string> logicOpToString = {
	{ D3D12_LOGIC_OP_CLEAR, "CLEAR" },
	{ D3D12_LOGIC_OP_SET, "SET" },
	{ D3D12_LOGIC_OP_COPY, "COPY" },
	{ D3D12_LOGIC_OP_COPY_INVERTED, "COPY_INVERTED" },
	{ D3D12_LOGIC_OP_NOOP, "NOOP" },
	{ D3D12_LOGIC_OP_INVERT, "INVERT" },
	{ D3D12_LOGIC_OP_AND, "AND" },
	{ D3D12_LOGIC_OP_NAND, "NAND" },
	{ D3D12_LOGIC_OP_OR, "OR" },
	{ D3D12_LOGIC_OP_NOR, "NOR" },
	{ D3D12_LOGIC_OP_XOR, "XOR" },
	{ D3D12_LOGIC_OP_EQUIV, "EQUIV" },
	{ D3D12_LOGIC_OP_AND_REVERSE, "AND_REVERSE" },
	{ D3D12_LOGIC_OP_AND_INVERTED, "AND_INVERTED" },
	{ D3D12_LOGIC_OP_OR_REVERSE, "OR_REVERSE" },
	{ D3D12_LOGIC_OP_OR_INVERTED, "OR_INVERTED" },
};

static std::map<std::string, D3D12_LOGIC_OP> stringToLogicOp = {
	{ "CLEAR", D3D12_LOGIC_OP_CLEAR },
	{ "SET", D3D12_LOGIC_OP_SET },
	{ "COPY", D3D12_LOGIC_OP_COPY },
	{ "COPY_INVERTED", D3D12_LOGIC_OP_COPY_INVERTED },
	{ "NOOP", D3D12_LOGIC_OP_NOOP },
	{ "INVERT", D3D12_LOGIC_OP_INVERT },
	{ "AND", D3D12_LOGIC_OP_AND },
	{ "NAND", D3D12_LOGIC_OP_NAND },
	{ "OR", D3D12_LOGIC_OP_OR },
	{ "NOR", D3D12_LOGIC_OP_NOR },
	{ "XOR", D3D12_LOGIC_OP_XOR },
	{ "EQUIV", D3D12_LOGIC_OP_EQUIV },
	{ "AND_REVERSE", D3D12_LOGIC_OP_AND_REVERSE },
	{ "AND_INVERTED", D3D12_LOGIC_OP_AND_INVERTED },
	{ "OR_REVERSE", D3D12_LOGIC_OP_OR_REVERSE },
	{ "OR_INVERTED", D3D12_LOGIC_OP_OR_INVERTED },
};

static std::map<SOUND_EFFECT_INSTANCE_FLAGS, std::string> soundEffectInstanceFlagsToStr = {
	{ SoundEffectInstance_Default ,"Default"},
	{ SoundEffectInstance_Use3D , "Use3D"},
	{ SoundEffectInstance_ReverbUseFilters ,"ReverbUseFilters"},
	{ SoundEffectInstance_NoSetPitch , "NoSetPitch"},
	{ SoundEffectInstance_UseRedirectLFE, "UseRedirectLFE"},
};

static std::map<std::string, SOUND_EFFECT_INSTANCE_FLAGS> strToSoundEffectInstanceFlags = {
	{ "Default", SoundEffectInstance_Default },
	{ "Use3D", SoundEffectInstance_Use3D },
	{ "ReverbUseFilters", SoundEffectInstance_ReverbUseFilters },
	{ "NoSetPitch", SoundEffectInstance_NoSetPitch },
	{ "UseRedirectLFE", SoundEffectInstance_UseRedirectLFE },
};
