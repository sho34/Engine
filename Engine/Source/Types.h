#pragma once
#include <cstdint>
#include <map>

#if defined(_EDITOR)
#include "Shaders/Compiler/ShaderCompilerOutput.h"
#endif

//notifications
struct NotificationTarget {
	bool operator()(const NotificationTarget& a, const NotificationTarget& b) const {
		return (intptr_t)a.target == (intptr_t)b.target;
	}
	bool operator < (const NotificationTarget& b) const {
		return (intptr_t)this->target == (intptr_t)b.target;
	}
	void* target;
};

struct NotificationCallbacks {
	void (*onLoadStart)(void* target) = nullptr;
	void (*onLoadComplete)(void* target, void* source) = nullptr;
	void (*onDestroy)(void* target, void* source) = nullptr;
};
typedef std::map<NotificationTarget, NotificationCallbacks> ChangesNotifications;
template<typename T>
using TemplatesNotification = std::map<T, ChangesNotifications>;

template<typename T>
void NotifyOnLoadStart(ChangesNotifications& notifications) {
	for (auto &[target, callbacks] : notifications) {
		callbacks.onLoadStart(target.target);
	}
}

template<typename T>
void NotifyOnLoadComplete(T* source, ChangesNotifications& notifications) {
	for (auto& [target, callbacks] : notifications) {
		callbacks.onLoadComplete(target.target, (void*)(source));
	}
}

template<typename T>
void NotifyOnDestroy(T* source, ChangesNotifications& notifications) {
	for (auto& [target, callbacks] : notifications) {
		callbacks.onDestroy(target.target, (void*)(source));
	}
}

enum MaterialVariablesTypes {
	MAT_VAR_BOOLEAN,
	MAT_VAR_INTEGER,
	MAT_VAR_UNSIGNED_INTEGER,
	MAT_VAR_RGB,
	MAT_VAR_RGBA,
	MAT_VAR_FLOAT,
	MAT_VAR_FLOAT2,
	MAT_VAR_FLOAT3,
	MAT_VAR_FLOAT4,
	MAT_VAR_MATRIX4X4
};

static std::vector<std::string> MaterialVariablesTypesStr = {
	"BOOLEAN",
	"INTEGER",
	"UNSIGNED_INTEGER",
	"RGB",
	"RGBA",
	"FLOAT",
	"FLOAT2",
	"FLOAT3",
	"FLOAT4",
	"MATRIX4X4"
};

static std::map<MaterialVariablesTypes, std::string> MaterialVariablesTypesNames = {
	{MaterialVariablesTypes::MAT_VAR_BOOLEAN, "BOOLEAN"},
	{MaterialVariablesTypes::MAT_VAR_INTEGER, "INTEGER"},
	{MaterialVariablesTypes::MAT_VAR_UNSIGNED_INTEGER, "UNSIGNED_INTEGER"},
	{MaterialVariablesTypes::MAT_VAR_RGB, "RGB"},
	{MaterialVariablesTypes::MAT_VAR_RGBA, "RGBA"},
	{MaterialVariablesTypes::MAT_VAR_FLOAT, "FLOAT"},
	{MaterialVariablesTypes::MAT_VAR_FLOAT2, "FLOAT2"},
	{MaterialVariablesTypes::MAT_VAR_FLOAT3, "FLOAT3"},
	{MaterialVariablesTypes::MAT_VAR_FLOAT4, "FLOAT4"},
	{MaterialVariablesTypes::MAT_VAR_MATRIX4X4, "MATRIX4X4"},
};

static std::map<std::string, MaterialVariablesTypes> StrToMaterialVariablesTypes = {
	{ "BOOLEAN", MAT_VAR_BOOLEAN },
	{ "INTEGER", MAT_VAR_INTEGER },
	{ "UNSIGNED_INTEGER", MAT_VAR_UNSIGNED_INTEGER },
	{ "RGB", MAT_VAR_RGB },
	{ "RGBA", MAT_VAR_RGBA },
	{ "FLOAT", MAT_VAR_FLOAT },
	{ "FLOAT2", MAT_VAR_FLOAT2 },
	{ "FLOAT3", MAT_VAR_FLOAT3 },
	{ "FLOAT4", MAT_VAR_FLOAT4 },
	{ "MATRIX4X4", MAT_VAR_MATRIX4X4 }
};

static std::map<MaterialVariablesTypes, size_t> MaterialVariablesTypesSizes = {
	{MaterialVariablesTypes::MAT_VAR_BOOLEAN, sizeof(bool)},
	{MaterialVariablesTypes::MAT_VAR_INTEGER, sizeof(int)},
	{MaterialVariablesTypes::MAT_VAR_UNSIGNED_INTEGER, sizeof(unsigned int)},
	{MaterialVariablesTypes::MAT_VAR_RGB, sizeof(float[3])},
	{MaterialVariablesTypes::MAT_VAR_RGBA, sizeof(float[4])},
	{MaterialVariablesTypes::MAT_VAR_FLOAT, sizeof(float)},
	{MaterialVariablesTypes::MAT_VAR_FLOAT2, sizeof(float[2])},
	{MaterialVariablesTypes::MAT_VAR_FLOAT3, sizeof(float[3])},
	{MaterialVariablesTypes::MAT_VAR_FLOAT4, sizeof(float[4])},
	{MaterialVariablesTypes::MAT_VAR_MATRIX4X4, sizeof(float[16])},
};

struct MaterialVariableInitialValue {
	MaterialVariablesTypes variableType;
	std::any value;
};
typedef std::pair<std::string, MaterialVariableInitialValue> MaterialInitialValuePair;
typedef std::map<std::string, MaterialVariableInitialValue> MaterialInitialValueMap;

struct MaterialVariableMapping {
	MaterialVariablesTypes variableType;
	CBufferVariable mapping;
};
typedef std::map<std::string, MaterialVariableMapping> MaterialVariablesMapping;

static std::string WStringToString(std::wstring wstr) {
	std::string str;
	std::transform(wstr.begin(), wstr.end(), std::back_inserter(str), [](wchar_t c) { return (char)c; });
	return str;
}

static std::wstring StringToWString(std::string str) {
	std::wstring wstr(str.begin(),str.end());
	return wstr;
}

static DirectX::XMFLOAT3 JsonToFloat3(nlohmann::json f3) {
	return DirectX::XMFLOAT3({ f3[0], f3[1], f3[2] });
}

static DirectX::XMFLOAT2 JsonToFloat2(nlohmann::json f2) {
	return DirectX::XMFLOAT2({ f2[0], f2[1] });
}

static nlohmann::json TransformMappingToJson(MaterialInitialValueMap mappedValues) {

	using namespace DirectX;
	nlohmann::json jMappedValues = nlohmann::json::array();

	std::transform(mappedValues.begin(), mappedValues.end(), std::back_inserter(jMappedValues), [](MaterialInitialValuePair pair) {
		nlohmann::json matInitialValue = nlohmann::json({});

		matInitialValue["variable"] = pair.first;
		matInitialValue["variableType"] = MaterialVariablesTypesStr[pair.second.variableType];

		switch (pair.second.variableType) {
		case MAT_VAR_BOOLEAN:
		{
			auto value = std::any_cast<BOOLEAN>(pair.second.value);
			matInitialValue["value"] = value;
		}
		break;
		case MAT_VAR_INTEGER:
		{
			auto value = std::any_cast<INT>(pair.second.value);
			matInitialValue["value"] = value;
		}
		break;
		case MAT_VAR_UNSIGNED_INTEGER:
		{
			auto value = std::any_cast<UINT>(pair.second.value);
			matInitialValue["value"] = value;
		}
		break;
		case MAT_VAR_RGB:
			break;
		case MAT_VAR_RGBA:
			break;
		case MAT_VAR_FLOAT:
		{
			auto value = std::any_cast<FLOAT>(pair.second.value);
			matInitialValue["value"] = value;
		}
		break;
		case MAT_VAR_FLOAT2:
			break;
		case MAT_VAR_FLOAT3:
		{
			auto value = std::any_cast<XMFLOAT3>(pair.second.value);
			matInitialValue["value"] = { value.x , value.y, value.z };
		}
		break;
		case MAT_VAR_FLOAT4:
			break;
		case MAT_VAR_MATRIX4X4:
			break;
		}

		return matInitialValue;
	});

	return jMappedValues;

}

static MaterialInitialValueMap TransformJsonToMapping(nlohmann::json mappedValues) {
	
	using namespace DirectX;
	MaterialInitialValueMap map;

	std::transform(mappedValues.begin(), mappedValues.end(), std::inserter(map, map.end()), [](const nlohmann::json& value) {
		MaterialInitialValuePair pair;

		pair.first = value["variable"];
		pair.second.variableType = StrToMaterialVariablesTypes[value["variableType"]];

		switch (pair.second.variableType) {
		case MAT_VAR_BOOLEAN:
		{
			bool valueB = value["value"];
			pair.second.value = valueB;
		}
		break;
		case MAT_VAR_INTEGER:
		{
			int valueI = value["value"];
			pair.second.value = valueI;
		}
		break;
		case MAT_VAR_UNSIGNED_INTEGER:
		{
			UINT valueUI = value["value"];
			pair.second.value = valueUI;
		}
		break;
		case MAT_VAR_RGB:
			break;
		case MAT_VAR_RGBA:
			break;
		case MAT_VAR_FLOAT:
		{
			float valueF = value["value"];
			pair.second.value = valueF;
		}
		break;
		case MAT_VAR_FLOAT2:
			break;
		case MAT_VAR_FLOAT3:
		{
			pair.second.value = XMFLOAT3({ value["value"][0] , value["value"][1], value["value"][2] });
		}
		break;
		case MAT_VAR_FLOAT4:
			break;
		case MAT_VAR_MATRIX4X4:
			break;
		}

		return pair;
	});

	return map;

}

template<typename T>
std::set<T> TransformJsonArrayToSet(nlohmann::json j) {
	std::set<T> set;
	for (auto& value : j) {
		T v = value;
		set.insert(v);
	}
	return set;
}

static std::map<DXGI_FORMAT, std::string> texturesFormatsToString = {
	{ DXGI_FORMAT_UNKNOWN, "UNKNOWN" },
	{ DXGI_FORMAT_R32G32B32A32_TYPELESS, "R32G32B32A32_TYPELESS" },
	{ DXGI_FORMAT_R32G32B32A32_FLOAT, "R32G32B32A32_FLOAT" },
	{ DXGI_FORMAT_R32G32B32A32_UINT, "R32G32B32A32_UINT" },
	{ DXGI_FORMAT_R32G32B32A32_SINT, "R32G32B32A32_SINT" },
	{ DXGI_FORMAT_R32G32B32_TYPELESS, "R32G32B32_TYPELESS" },
	{ DXGI_FORMAT_R32G32B32_FLOAT, "R32G32B32_FLOAT" },
	{ DXGI_FORMAT_R32G32B32_UINT, "R32G32B32_UINT" },
	{ DXGI_FORMAT_R32G32B32_SINT, "R32G32B32_SINT" },
	{ DXGI_FORMAT_R16G16B16A16_TYPELESS, "R16G16B16A16_TYPELESS" },
	{ DXGI_FORMAT_R16G16B16A16_FLOAT, "R16G16B16A16_FLOAT" },
	{ DXGI_FORMAT_R16G16B16A16_UNORM, "R16G16B16A16_UNORM" },
	{ DXGI_FORMAT_R16G16B16A16_UINT, "R16G16B16A16_UINT" },
	{ DXGI_FORMAT_R16G16B16A16_SNORM, "R16G16B16A16_SNORM" },
	{ DXGI_FORMAT_R16G16B16A16_SINT, "R16G16B16A16_SINT" },
	{ DXGI_FORMAT_R32G32_TYPELESS, "R32G32_TYPELESS" },
	{ DXGI_FORMAT_R32G32_FLOAT, "R32G32_FLOAT" },
	{ DXGI_FORMAT_R32G32_UINT, "R32G32_UINT" },
	{ DXGI_FORMAT_R32G32_SINT, "R32G32_SINT" },
	{ DXGI_FORMAT_R32G8X24_TYPELESS, "R32G8X24_TYPELESS" },
	{ DXGI_FORMAT_D32_FLOAT_S8X24_UINT, "D32_FLOAT_S8X24_UINT" },
	{ DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, "R32_FLOAT_X8X24_TYPELESS" },
	{ DXGI_FORMAT_X32_TYPELESS_G8X24_UINT, "X32_TYPELESS_G8X24_UINT" },
	{ DXGI_FORMAT_R10G10B10A2_TYPELESS, "R10G10B10A2_TYPELESS" },
	{ DXGI_FORMAT_R10G10B10A2_UNORM, "R10G10B10A2_UNORM" },
	{ DXGI_FORMAT_R10G10B10A2_UINT, "R10G10B10A2_UINT" },
	{ DXGI_FORMAT_R11G11B10_FLOAT, "R11G11B10_FLOAT" },
	{ DXGI_FORMAT_R8G8B8A8_TYPELESS, "R8G8B8A8_TYPELESS" },
	{ DXGI_FORMAT_R8G8B8A8_UNORM, "R8G8B8A8_UNORM" },
	{ DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, "R8G8B8A8_UNORM_SRGB" },
	{ DXGI_FORMAT_R8G8B8A8_UINT, "R8G8B8A8_UINT" },
	{ DXGI_FORMAT_R8G8B8A8_SNORM, "R8G8B8A8_SNORM" },
	{ DXGI_FORMAT_R8G8B8A8_SINT, "R8G8B8A8_SINT" },
	{ DXGI_FORMAT_R16G16_TYPELESS, "R16G16_TYPELESS" },
	{ DXGI_FORMAT_R16G16_FLOAT, "R16G16_FLOAT" },
	{ DXGI_FORMAT_R16G16_UNORM, "R16G16_UNORM" },
	{ DXGI_FORMAT_R16G16_UINT, "R16G16_UINT" },
	{ DXGI_FORMAT_R16G16_SNORM, "R16G16_SNORM" },
	{ DXGI_FORMAT_R16G16_SINT, "R16G16_SINT" },
	{ DXGI_FORMAT_R32_TYPELESS, "R32_TYPELESS" },
	{ DXGI_FORMAT_D32_FLOAT, "D32_FLOAT" },
	{ DXGI_FORMAT_R32_FLOAT, "R32_FLOAT" },
	{ DXGI_FORMAT_R32_UINT, "R32_UINT" },
	{ DXGI_FORMAT_R32_SINT, "R32_SINT" },
	{ DXGI_FORMAT_R24G8_TYPELESS, "R24G8_TYPELESS" },
	{ DXGI_FORMAT_D24_UNORM_S8_UINT, "D24_UNORM_S8_UINT" },
	{ DXGI_FORMAT_R24_UNORM_X8_TYPELESS, "R24_UNORM_X8_TYPELESS" },
	{ DXGI_FORMAT_X24_TYPELESS_G8_UINT, "X24_TYPELESS_G8_UINT" },
	{ DXGI_FORMAT_R8G8_TYPELESS, "R8G8_TYPELESS" },
	{ DXGI_FORMAT_R8G8_UNORM, "R8G8_UNORM" },
	{ DXGI_FORMAT_R8G8_UINT, "R8G8_UINT" },
	{ DXGI_FORMAT_R8G8_SNORM, "R8G8_SNORM" },
	{ DXGI_FORMAT_R8G8_SINT, "R8G8_SINT" },
	{ DXGI_FORMAT_R16_TYPELESS, "R16_TYPELESS" },
	{ DXGI_FORMAT_R16_FLOAT, "R16_FLOAT" },
	{ DXGI_FORMAT_D16_UNORM, "D16_UNORM" },
	{ DXGI_FORMAT_R16_UNORM, "R16_UNORM" },
	{ DXGI_FORMAT_R16_UINT, "R16_UINT" },
	{ DXGI_FORMAT_R16_SNORM, "R16_SNORM" },
	{ DXGI_FORMAT_R16_SINT, "R16_SINT" },
	{ DXGI_FORMAT_R8_TYPELESS, "R8_TYPELESS" },
	{ DXGI_FORMAT_R8_UNORM, "R8_UNORM" },
	{ DXGI_FORMAT_R8_UINT, "R8_UINT" },
	{ DXGI_FORMAT_R8_SNORM, "R8_SNORM" },
	{ DXGI_FORMAT_R8_SINT, "R8_SINT" },
	{ DXGI_FORMAT_A8_UNORM, "A8_UNORM" },
	{ DXGI_FORMAT_R1_UNORM, "R1_UNORM" },
	{ DXGI_FORMAT_R9G9B9E5_SHAREDEXP, "R9G9B9E5_SHAREDEXP" },
	{ DXGI_FORMAT_R8G8_B8G8_UNORM, "R8G8_B8G8_UNORM" },
	{ DXGI_FORMAT_G8R8_G8B8_UNORM, "G8R8_G8B8_UNORM" },
	{ DXGI_FORMAT_BC1_TYPELESS, "BC1_TYPELESS" },
	{ DXGI_FORMAT_BC1_UNORM, "BC1_UNORM" },
	{ DXGI_FORMAT_BC1_UNORM_SRGB, "BC1_UNORM_SRGB" },
	{ DXGI_FORMAT_BC2_TYPELESS, "BC2_TYPELESS" },
	{ DXGI_FORMAT_BC2_UNORM, "BC2_UNORM" },
	{ DXGI_FORMAT_BC2_UNORM_SRGB, "BC2_UNORM_SRGB" },
	{ DXGI_FORMAT_BC3_TYPELESS, "BC3_TYPELESS" },
	{ DXGI_FORMAT_BC3_UNORM, "BC3_UNORM" },
	{ DXGI_FORMAT_BC3_UNORM_SRGB, "BC3_UNORM_SRGB" },
	{ DXGI_FORMAT_BC4_TYPELESS, "BC4_TYPELESS" },
	{ DXGI_FORMAT_BC4_UNORM, "BC4_UNORM" },
	{ DXGI_FORMAT_BC4_SNORM, "BC4_SNORM" },
	{ DXGI_FORMAT_BC5_TYPELESS, "BC5_TYPELESS" },
	{ DXGI_FORMAT_BC5_UNORM, "BC5_UNORM" },
	{ DXGI_FORMAT_BC5_SNORM, "BC5_SNORM" },
	{ DXGI_FORMAT_B5G6R5_UNORM, "B5G6R5_UNORM" },
	{ DXGI_FORMAT_B5G5R5A1_UNORM, "B5G5R5A1_UNORM" },
	{ DXGI_FORMAT_B8G8R8A8_UNORM, "B8G8R8A8_UNORM" },
	{ DXGI_FORMAT_B8G8R8X8_UNORM, "B8G8R8X8_UNORM" },
	{ DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, "R10G10B10_XR_BIAS_A2_UNORM" },
	{ DXGI_FORMAT_B8G8R8A8_TYPELESS, "B8G8R8A8_TYPELESS" },
	{ DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, "B8G8R8A8_UNORM_SRGB" },
	{ DXGI_FORMAT_B8G8R8X8_TYPELESS, "B8G8R8X8_TYPELESS" },
	{ DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, "B8G8R8X8_UNORM_SRGB" },
	{ DXGI_FORMAT_BC6H_TYPELESS, "BC6H_TYPELESS" },
	{ DXGI_FORMAT_BC6H_UF16, "BC6H_UF16" },
	{ DXGI_FORMAT_BC6H_SF16, "BC6H_SF16" },
	{ DXGI_FORMAT_BC7_TYPELESS, "BC7_TYPELESS" },
	{ DXGI_FORMAT_BC7_UNORM, "BC7_UNORM" },
	{ DXGI_FORMAT_BC7_UNORM_SRGB, "BC7_UNORM_SRGB" },
	{ DXGI_FORMAT_AYUV, "AYUV" },
	{ DXGI_FORMAT_Y410, "Y410" },
	{ DXGI_FORMAT_Y416, "Y416" },
	{ DXGI_FORMAT_NV12, "NV12" },
	{ DXGI_FORMAT_P010, "P010" },
	{ DXGI_FORMAT_P016, "P016" },
	{ DXGI_FORMAT_420_OPAQUE, "420_OPAQUE" },
	{ DXGI_FORMAT_YUY2, "YUY2" },
	{ DXGI_FORMAT_Y210, "Y210" },
	{ DXGI_FORMAT_Y216, "Y216" },
	{ DXGI_FORMAT_NV11, "NV11" },
	{ DXGI_FORMAT_AI44, "AI44" },
	{ DXGI_FORMAT_IA44, "IA44" },
	{ DXGI_FORMAT_P8, "P8" },
	{ DXGI_FORMAT_A8P8, "A8P8" },
	{ DXGI_FORMAT_B4G4R4A4_UNORM, "B4G4R4A4_UNORM" },
	{ DXGI_FORMAT_P208, "P208" },
	{ DXGI_FORMAT_V208, "V208" },
	{ DXGI_FORMAT_V408, "V408" },
	{ DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,  "SAMPLER_FEEDBACK_MIN_MIP_OPAQUE" },
	{ DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE, "SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE" },
	{ DXGI_FORMAT_A4B4G4R4_UNORM, "A4B4G4R4_UNORM" },
	{ DXGI_FORMAT_FORCE_UINT, "FORCE_UINT" }
};

static std::map<std::string, DXGI_FORMAT> stringToTextureFormat = {
	{ "UNKNOWN", DXGI_FORMAT_UNKNOWN },
	{ "R32G32B32A32_TYPELESS", DXGI_FORMAT_R32G32B32A32_TYPELESS },
	{ "R32G32B32A32_FLOAT", DXGI_FORMAT_R32G32B32A32_FLOAT },
	{ "R32G32B32A32_UINT", DXGI_FORMAT_R32G32B32A32_UINT },
	{ "R32G32B32A32_SINT", DXGI_FORMAT_R32G32B32A32_SINT },
	{ "R32G32B32_TYPELESS", DXGI_FORMAT_R32G32B32_TYPELESS },
	{ "R32G32B32_FLOAT", DXGI_FORMAT_R32G32B32_FLOAT },
	{ "R32G32B32_UINT", DXGI_FORMAT_R32G32B32_UINT },
	{ "R32G32B32_SINT", DXGI_FORMAT_R32G32B32_SINT },
	{ "R16G16B16A16_TYPELESS", DXGI_FORMAT_R16G16B16A16_TYPELESS },
	{ "R16G16B16A16_FLOAT", DXGI_FORMAT_R16G16B16A16_FLOAT },
	{ "R16G16B16A16_UNORM", DXGI_FORMAT_R16G16B16A16_UNORM },
	{ "R16G16B16A16_UINT", DXGI_FORMAT_R16G16B16A16_UINT },
	{ "R16G16B16A16_SNORM", DXGI_FORMAT_R16G16B16A16_SNORM },
	{ "R16G16B16A16_SINT", DXGI_FORMAT_R16G16B16A16_SINT },
	{ "R32G32_TYPELESS", DXGI_FORMAT_R32G32_TYPELESS },
	{ "R32G32_FLOAT", DXGI_FORMAT_R32G32_FLOAT },
	{ "R32G32_UINT", DXGI_FORMAT_R32G32_UINT },
	{ "R32G32_SINT", DXGI_FORMAT_R32G32_SINT },
	{ "R32G8X24_TYPELESS", DXGI_FORMAT_R32G8X24_TYPELESS },
	{ "D32_FLOAT_S8X24_UINT", DXGI_FORMAT_D32_FLOAT_S8X24_UINT },
	{ "R32_FLOAT_X8X24_TYPELESS", DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS },
	{ "X32_TYPELESS_G8X24_UINT", DXGI_FORMAT_X32_TYPELESS_G8X24_UINT },
	{ "R10G10B10A2_TYPELESS", DXGI_FORMAT_R10G10B10A2_TYPELESS },
	{ "R10G10B10A2_UNORM", DXGI_FORMAT_R10G10B10A2_UNORM },
	{ "R10G10B10A2_UINT", DXGI_FORMAT_R10G10B10A2_UINT },
	{ "R11G11B10_FLOAT", DXGI_FORMAT_R11G11B10_FLOAT },
	{ "R8G8B8A8_TYPELESS", DXGI_FORMAT_R8G8B8A8_TYPELESS },
	{ "R8G8B8A8_UNORM", DXGI_FORMAT_R8G8B8A8_UNORM },
	{ "R8G8B8A8_UNORM_SRGB", DXGI_FORMAT_R8G8B8A8_UNORM_SRGB },
	{ "R8G8B8A8_UINT", DXGI_FORMAT_R8G8B8A8_UINT },
	{ "R8G8B8A8_SNORM", DXGI_FORMAT_R8G8B8A8_SNORM },
	{ "R8G8B8A8_SINT", DXGI_FORMAT_R8G8B8A8_SINT },
	{ "R16G16_TYPELESS", DXGI_FORMAT_R16G16_TYPELESS },
	{ "R16G16_FLOAT", DXGI_FORMAT_R16G16_FLOAT },
	{ "R16G16_UNORM", DXGI_FORMAT_R16G16_UNORM },
	{ "R16G16_UINT", DXGI_FORMAT_R16G16_UINT },
	{ "R16G16_SNORM", DXGI_FORMAT_R16G16_SNORM },
	{ "R16G16_SINT", DXGI_FORMAT_R16G16_SINT },
	{ "R32_TYPELESS", DXGI_FORMAT_R32_TYPELESS },
	{ "D32_FLOAT", DXGI_FORMAT_D32_FLOAT },
	{ "R32_FLOAT", DXGI_FORMAT_R32_FLOAT },
	{ "R32_UINT", DXGI_FORMAT_R32_UINT },
	{ "R32_SINT", DXGI_FORMAT_R32_SINT },
	{ "R24G8_TYPELESS", DXGI_FORMAT_R24G8_TYPELESS },
	{ "D24_UNORM_S8_UINT", DXGI_FORMAT_D24_UNORM_S8_UINT },
	{ "R24_UNORM_X8_TYPELESS", DXGI_FORMAT_R24_UNORM_X8_TYPELESS },
	{ "X24_TYPELESS_G8_UINT", DXGI_FORMAT_X24_TYPELESS_G8_UINT },
	{ "R8G8_TYPELESS", DXGI_FORMAT_R8G8_TYPELESS },
	{ "R8G8_UNORM", DXGI_FORMAT_R8G8_UNORM },
	{ "R8G8_UINT", DXGI_FORMAT_R8G8_UINT },
	{ "R8G8_SNORM", DXGI_FORMAT_R8G8_SNORM },
	{ "R8G8_SINT", DXGI_FORMAT_R8G8_SINT },
	{ "R16_TYPELESS", DXGI_FORMAT_R16_TYPELESS },
	{ "R16_FLOAT", DXGI_FORMAT_R16_FLOAT },
	{ "D16_UNORM", DXGI_FORMAT_D16_UNORM },
	{ "R16_UNORM", DXGI_FORMAT_R16_UNORM },
	{ "R16_UINT", DXGI_FORMAT_R16_UINT },
	{ "R16_SNORM", DXGI_FORMAT_R16_SNORM },
	{ "R16_SINT", DXGI_FORMAT_R16_SINT },
	{ "R8_TYPELESS", DXGI_FORMAT_R8_TYPELESS },
	{ "R8_UNORM", DXGI_FORMAT_R8_UNORM },
	{ "R8_UINT", DXGI_FORMAT_R8_UINT },
	{ "R8_SNORM", DXGI_FORMAT_R8_SNORM },
	{ "R8_SINT", DXGI_FORMAT_R8_SINT },
	{ "A8_UNORM", DXGI_FORMAT_A8_UNORM },
	{ "R1_UNORM", DXGI_FORMAT_R1_UNORM },
	{ "R9G9B9E5_SHAREDEXP", DXGI_FORMAT_R9G9B9E5_SHAREDEXP },
	{ "R8G8_B8G8_UNORM", DXGI_FORMAT_R8G8_B8G8_UNORM },
	{ "G8R8_G8B8_UNORM", DXGI_FORMAT_G8R8_G8B8_UNORM },
	{ "BC1_TYPELESS", DXGI_FORMAT_BC1_TYPELESS },
	{ "BC1_UNORM", DXGI_FORMAT_BC1_UNORM },
	{ "BC1_UNORM_SRGB", DXGI_FORMAT_BC1_UNORM_SRGB },
	{ "BC2_TYPELESS", DXGI_FORMAT_BC2_TYPELESS },
	{ "BC2_UNORM", DXGI_FORMAT_BC2_UNORM },
	{ "BC2_UNORM_SRGB", DXGI_FORMAT_BC2_UNORM_SRGB },
	{ "BC3_TYPELESS", DXGI_FORMAT_BC3_TYPELESS },
	{ "BC3_UNORM", DXGI_FORMAT_BC3_UNORM },
	{ "BC3_UNORM_SRGB", DXGI_FORMAT_BC3_UNORM_SRGB },
	{ "BC4_TYPELESS", DXGI_FORMAT_BC4_TYPELESS },
	{ "BC4_UNORM", DXGI_FORMAT_BC4_UNORM },
	{ "BC4_SNORM", DXGI_FORMAT_BC4_SNORM },
	{ "BC5_TYPELESS", DXGI_FORMAT_BC5_TYPELESS },
	{ "BC5_UNORM", DXGI_FORMAT_BC5_UNORM },
	{ "BC5_SNORM", DXGI_FORMAT_BC5_SNORM },
	{ "B5G6R5_UNORM", DXGI_FORMAT_B5G6R5_UNORM },
	{ "B5G5R5A1_UNORM", DXGI_FORMAT_B5G5R5A1_UNORM },
	{ "B8G8R8A8_UNORM", DXGI_FORMAT_B8G8R8A8_UNORM },
	{ "B8G8R8X8_UNORM", DXGI_FORMAT_B8G8R8X8_UNORM },
	{ "R10G10B10_XR_BIAS_A2_UNORM", DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM },
	{ "B8G8R8A8_TYPELESS", DXGI_FORMAT_B8G8R8A8_TYPELESS },
	{ "B8G8R8A8_UNORM_SRGB", DXGI_FORMAT_B8G8R8A8_UNORM_SRGB },
	{ "B8G8R8X8_TYPELESS", DXGI_FORMAT_B8G8R8X8_TYPELESS },
	{ "B8G8R8X8_UNORM_SRGB", DXGI_FORMAT_B8G8R8X8_UNORM_SRGB },
	{ "BC6H_TYPELESS", DXGI_FORMAT_BC6H_TYPELESS },
	{ "BC6H_UF16", DXGI_FORMAT_BC6H_UF16 },
	{ "BC6H_SF16", DXGI_FORMAT_BC6H_SF16 },
	{ "BC7_TYPELESS", DXGI_FORMAT_BC7_TYPELESS },
	{ "BC7_UNORM", DXGI_FORMAT_BC7_UNORM },
	{ "BC7_UNORM_SRGB", DXGI_FORMAT_BC7_UNORM_SRGB },
	{ "AYUV", DXGI_FORMAT_AYUV },
	{ "Y410", DXGI_FORMAT_Y410 },
	{ "Y416", DXGI_FORMAT_Y416 },
	{ "NV12", DXGI_FORMAT_NV12 },
	{ "P010", DXGI_FORMAT_P010 },
	{ "P016", DXGI_FORMAT_P016 },
	{ "420_OPAQUE", DXGI_FORMAT_420_OPAQUE },
	{ "YUY2", DXGI_FORMAT_YUY2 },
	{ "Y210", DXGI_FORMAT_Y210 },
	{ "Y216", DXGI_FORMAT_Y216 },
	{ "NV11", DXGI_FORMAT_NV11 },
	{ "AI44", DXGI_FORMAT_AI44 },
	{ "IA44", DXGI_FORMAT_IA44 },
	{ "P8", DXGI_FORMAT_P8 },
	{ "A8P8", DXGI_FORMAT_A8P8 },
	{ "B4G4R4A4_UNORM", DXGI_FORMAT_B4G4R4A4_UNORM },
	{ "P208", DXGI_FORMAT_P208 },
	{ "V208", DXGI_FORMAT_V208 },
	{ "V408", DXGI_FORMAT_V408 },
	{ "SAMPLER_FEEDBACK_MIN_MIP_OPAQUE", DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE },
	{ "SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE", DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE },
	{ "A4B4G4R4_UNORM", DXGI_FORMAT_A4B4G4R4_UNORM },
	{ "FORCE_UINT", DXGI_FORMAT_FORCE_UINT }
};

static std::map<D3D12_FILTER, std::string> filterToString = {
	{ D3D12_FILTER_MIN_MAG_MIP_POINT, "MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR, "MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT, "MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR, "MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT, "MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT, "MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MIN_MAG_MIP_LINEAR, "MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT, "MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_ANISOTROPIC, "ANISOTROPIC" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT, "COMPARISON_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR, "COMPARISON_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT, "COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR, "COMPARISON_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT, "COMPARISON_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT, "COMPARISON_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR, "COMPARISON_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT, "COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_COMPARISON_ANISOTROPIC, "COMPARISON_ANISOTROPIC" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT, "MINIMUM_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR, "MINIMUM_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT, "MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR, "MINIMUM_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT, "MINIMUM_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT, "MINIMUM_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR, "MINIMUM_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT, "MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_MINIMUM_ANISOTROPIC, "MINIMUM_ANISOTROPIC" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT, "MAXIMUM_MIN_MAG_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR, "MAXIMUM_MIN_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT, "MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR, "MAXIMUM_MIN_POINT_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT, "MAXIMUM_MIN_LINEAR_MAG_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR, "MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT, "MAXIMUM_MIN_MAG_LINEAR_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR, "MAXIMUM_MIN_MAG_MIP_LINEAR" },
	{ D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT, "MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT" },
	{ D3D12_FILTER_MAXIMUM_ANISOTROPIC, "MAXIMUM_ANISOTROPIC" }
};

static std::map<std::string, D3D12_FILTER> stringToFilter = {
	{ "MIN_MAG_MIP_POINT", D3D12_FILTER_MIN_MAG_MIP_POINT },
	{ "MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR },
	{ "MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR },
	{ "MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT },
	{ "MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT },
	{ "MIN_MAG_MIP_LINEAR", D3D12_FILTER_MIN_MAG_MIP_LINEAR },
	{ "MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "ANISOTROPIC", D3D12_FILTER_ANISOTROPIC },
	{ "COMPARISON_MIN_MAG_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT },
	{ "COMPARISON_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR },
	{ "COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "COMPARISON_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR },
	{ "COMPARISON_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT },
	{ "COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "COMPARISON_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT },
	{ "COMPARISON_MIN_MAG_MIP_LINEAR", D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR },
	{ "COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "COMPARISON_ANISOTROPIC", D3D12_FILTER_COMPARISON_ANISOTROPIC },
	{ "MINIMUM_MIN_MAG_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT },
	{ "MINIMUM_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR },
	{ "MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MINIMUM_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR },
	{ "MINIMUM_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT },
	{ "MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MINIMUM_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT },
	{ "MINIMUM_MIN_MAG_MIP_LINEAR", D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR },
	{ "MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "MINIMUM_ANISOTROPIC", D3D12_FILTER_MINIMUM_ANISOTROPIC },
	{ "MAXIMUM_MIN_MAG_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT },
	{ "MAXIMUM_MIN_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR },
	{ "MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
	{ "MAXIMUM_MIN_POINT_MAG_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR },
	{ "MAXIMUM_MIN_LINEAR_MAG_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT },
	{ "MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
	{ "MAXIMUM_MIN_MAG_LINEAR_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT },
	{ "MAXIMUM_MIN_MAG_MIP_LINEAR", D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR },
	{ "MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT", D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
	{ "MAXIMUM_ANISOTROPIC", D3D12_FILTER_MAXIMUM_ANISOTROPIC }
};

static std::map<D3D12_TEXTURE_ADDRESS_MODE, std::string> textureAddressModeToString = {
	{ D3D12_TEXTURE_ADDRESS_MODE_WRAP, "ADDRESS_MODE_WRAP" },
	{ D3D12_TEXTURE_ADDRESS_MODE_MIRROR, "ADDRESS_MODE_MIRROR" },
	{ D3D12_TEXTURE_ADDRESS_MODE_CLAMP, "ADDRESS_MODE_CLAMP" },
	{ D3D12_TEXTURE_ADDRESS_MODE_BORDER, "ADDRESS_MODE_BORDER" },
	{ D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE, "ADDRESS_MODE_MIRROR_ONCE" }
};

static std::map<std::string, D3D12_TEXTURE_ADDRESS_MODE> stringToTextureAddressMode = {
	{ "ADDRESS_MODE_WRAP", D3D12_TEXTURE_ADDRESS_MODE_WRAP },
	{ "ADDRESS_MODE_MIRROR", D3D12_TEXTURE_ADDRESS_MODE_MIRROR },
	{ "ADDRESS_MODE_CLAMP", D3D12_TEXTURE_ADDRESS_MODE_CLAMP },
	{ "ADDRESS_MODE_BORDER", D3D12_TEXTURE_ADDRESS_MODE_BORDER },
	{ "ADDRESS_MODE_MIRROR_ONCE", D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE }
};

static std::map<D3D12_COMPARISON_FUNC, std::string> comparisonFuncToString = {
	{ D3D12_COMPARISON_FUNC_NONE, "NONE" },
	{ D3D12_COMPARISON_FUNC_NEVER, "NEVER" },
	{ D3D12_COMPARISON_FUNC_LESS, "LESS" },
	{ D3D12_COMPARISON_FUNC_EQUAL, "EQUAL" },
	{ D3D12_COMPARISON_FUNC_LESS_EQUAL, "LESS_EQUAL" },
	{ D3D12_COMPARISON_FUNC_GREATER, "GREATER" },
	{ D3D12_COMPARISON_FUNC_NOT_EQUAL, "NOT_EQUAL" },
	{ D3D12_COMPARISON_FUNC_GREATER_EQUAL, "GREATER_EQUAL" },
	{ D3D12_COMPARISON_FUNC_ALWAYS, "ALWAYS" }
};

static std::map<std::string, D3D12_COMPARISON_FUNC> stringToComparisonFunc = {
	{ "NONE", D3D12_COMPARISON_FUNC_NONE },
	{ "NEVER", D3D12_COMPARISON_FUNC_NEVER },
	{ "LESS", D3D12_COMPARISON_FUNC_LESS },
	{ "EQUAL", D3D12_COMPARISON_FUNC_EQUAL },
	{ "LESS_EQUAL", D3D12_COMPARISON_FUNC_LESS_EQUAL },
	{ "GREATER", D3D12_COMPARISON_FUNC_GREATER },
	{ "NOT_EQUAL", D3D12_COMPARISON_FUNC_NOT_EQUAL },
	{ "GREATER_EQUAL", D3D12_COMPARISON_FUNC_GREATER_EQUAL },
	{ "ALWAYS", D3D12_COMPARISON_FUNC_ALWAYS }
};

static std::map<D3D12_STATIC_BORDER_COLOR, std::string> borderColorToString = {
	{ D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK, "TRANSPARENT_BLACK" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK, "OPAQUE_BLACK" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, "OPAQUE_WHITE" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT, "OPAQUE_BLACK_UINT" },
	{ D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT, "OPAQUE_WHITE_UINT" }
};

static std::map<std::string, D3D12_STATIC_BORDER_COLOR> stringToBorderColor = {
	{ "TRANSPARENT_BLACK", D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK },
	{ "OPAQUE_BLACK", D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK },
	{ "OPAQUE_WHITE", D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE },
	{ "OPAQUE_BLACK_UINT", D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT },
	{ "OPAQUE_WHITE_UINT", D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT }
};

static std::map<D3D12_SHADER_VISIBILITY, std::string> shaderVisibilityToString = {
	{ D3D12_SHADER_VISIBILITY_ALL, "ALL" },
	{ D3D12_SHADER_VISIBILITY_VERTEX, "VERTEX" },
	{ D3D12_SHADER_VISIBILITY_HULL, "HULL" },
	{ D3D12_SHADER_VISIBILITY_DOMAIN, "DOMAIN" },
	{ D3D12_SHADER_VISIBILITY_GEOMETRY, "GEOMETRY" },
	{ D3D12_SHADER_VISIBILITY_PIXEL, "PIXEL" },
	{ D3D12_SHADER_VISIBILITY_AMPLIFICATION, "AMPLIFICATION" },
	{ D3D12_SHADER_VISIBILITY_MESH, "MESH" }
};

static std::map<std::string, D3D12_SHADER_VISIBILITY> stringToShaderVisibility = {
	{ "ALL", D3D12_SHADER_VISIBILITY_ALL},
	{ "VERTEX", D3D12_SHADER_VISIBILITY_VERTEX },
	{ "HULL", D3D12_SHADER_VISIBILITY_HULL },
	{ "DOMAIN", D3D12_SHADER_VISIBILITY_DOMAIN },
	{ "GEOMETRY", D3D12_SHADER_VISIBILITY_GEOMETRY },
	{ "PIXEL", D3D12_SHADER_VISIBILITY_PIXEL },
	{ "AMPLIFICATION", D3D12_SHADER_VISIBILITY_AMPLIFICATION },
	{ "MESH", D3D12_SHADER_VISIBILITY_MESH }
};

static std::map<SOUND_EFFECT_INSTANCE_FLAGS, std::string> soundEffectInstanceFlagToString = {
	{ SoundEffectInstance_Default, "Default" },
	{ SoundEffectInstance_Use3D, "Use3D" },
	{ SoundEffectInstance_ReverbUseFilters,	"ReverbUseFilters" },
	{ SoundEffectInstance_NoSetPitch,	"NoSetPitch" },
	{ SoundEffectInstance_UseRedirectLFE,	"UseRedirectLFE" }
};

static std::map<std::string, SOUND_EFFECT_INSTANCE_FLAGS> stringToSoundEffectInstanceFlag = {
	{ "Default", SoundEffectInstance_Default },
	{ "Use3D",	SoundEffectInstance_Use3D },
	{ "ReverbUseFilters", SoundEffectInstance_ReverbUseFilters },
	{ "NoSetPitch", SoundEffectInstance_NoSetPitch },
	{ "UseRedirectLFE", SoundEffectInstance_UseRedirectLFE },
};

static const std::string defaultLevelsFolder = "Levels/";
static const std::string defaultTemplatesFolder = "Templates/";
static const std::string defaultLevelName = "baseLevel.json";

template<typename T>
void replaceFromJson(T& value, nlohmann::json& object, const std::string& key) {
	if(object.contains(key)) value = static_cast<T>(object[key]);
}

template<typename T, typename E>
bool bytesHas(T bytes, E flag ) {
	return (bytes & flag) == flag;
}

inline void DrawComboSelection(std::string selected, std::vector<std::string> selectables, std::function<void(std::string)> onSelect, std::string label = "") {

	int current_item = static_cast<int>(std::find(selectables.begin(), selectables.end(), selected) - selectables.begin());

	if (ImGui::BeginCombo(label.c_str(), selectables[current_item].c_str())) {

		for (int i = 0; i < selectables.size(); i++) {
			if (ImGui::Selectable(selectables[i].c_str(), current_item == i)) {
				onSelect(selectables[i]);
			}
		}

		ImGui::EndCombo();
	}
};